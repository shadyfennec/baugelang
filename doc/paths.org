#+Title: Paths

The *Path* is the fundamental concept of Bauge. A Bauge program follows
one or more path, sequentially or in parallel, and executes the
instructions that are on the path.

* How Paths are written
Paths use a wide range of characters to form different directions,
branchings, starts and ends. Here are the possible characters used for
paths:

| Character | UTF-8 Codepoint | Unicode name                               |
|-----------+-----------------+--------------------------------------------|
| =┌=         | U+250C          | BOX DRAWINGS LIGHT DOWN AND RIGHT          |
| =┐=         | U+2510          | BOX DRAWINGS LIGHT DOWN AND LEFT           |
| =└=         | U+2514          | BOX DRAWINGS LIGHT UP AND RIGHT            |
| =┘=         | U+2518          | BOX DRAWINGS LIGHT UP AND LEFT             |
| =│=         | U+2502          | BOX DRAWINGS LIGHT VERTICAL                |
| =─=         | U+2500          | BOX DRAWINGS LIGHT HORIZONTAL              |
| =┼=         | U+253C          | BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL |
| =├=         | U+251C          | BOX DRAWINGS LIGHT VERTICAL AND RIGHT      |
| =┤=         | U+2524          | BOX DRAWINGS LIGHT VERTICAL AND LEFT       |
| =┬=         | U+252C          | BOX DRAWINGS LIGHT DOWN AND HORIZONTAL     |
| =┴=         | U+2534          | BOX DRAWINGS LIGHT UP AND HORIZONTAL       |

Paths can also take the form of /doubly-lined Paths/, which mean they
are executed in parallel (more on that later). The characters used are:

| Character | UTF-8 Codepoint | Unicode name                                |
|-----------+-----------------+---------------------------------------------|
| =╔=         | U+2554          | BOX DRAWINGS DOUBLE DOWN AND RIGHT          |
| =╗=         | U+2557          | BOX DRAWINGS DOUBLE DOWN AND LEFT           |
| =╚=         | U+255A          | BOX DRAWINGS DOUBLE UP AND RIGHT            |
| =╝=         | U+255D          | BOX DRAWINGS DOUBLE UP AND LEFT             |
| =║=         | U+2551          | BOX DRAWINGS DOUBLE VERTICAL                |
| =═=         | U+2550          | BOX DRAWINGS DOUBLE HORIZONTAL              |
| =╬=         | U+256C          | BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL |
| =╠=         | U+2560          | BOX DRAWINGS DOUBLE VERTICAL AND RIGHT      |
| =╣=         | U+2563          | BOX DRAWINGS DOUBLE VERTICAL AND LEFT       |
| =╦=         | U+2566          | BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL     |
| =╩=         | U+2569          | BOX DRAWINGS DOUBLE UP AND HORIZONTAL       |

Additionally, there are characters that are used to join double Paths
and single Paths:

| Character | UTF-8 Codepoint | Unicode name                                       |
|-----------+-----------------+----------------------------------------------------|
| =╒=         | U+2552          | BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE          |
| =╓=         | U+2553          | BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE          |
| =╕=         | U+2555          | BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE           |
| =╖=         | U+2556          | BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE           |
| =╘=         | U+2558          | BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE            |
| =╙=         | U+2559          | BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE            |
| =╛=         | U+255B          | BOX DRAWINGS UP SINGLE AND LEFT DOUBLE             |
| =╜=         | U+255C          | BOX DRAWINGS UP DOUBLE AND LEFT SINGLE             |
| =╞=         | U+255E          | BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE      |
| =╟=         | U+255F          | BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE      |
| =╡=         | U+2561          | BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE       |
| =╢=         | U+2562          | BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE       |
| =╤=         | U+2564          | BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE     |
| =╥=         | U+2565          | BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE     |
| =╧=         | U+2567          | BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE       |
| =╨=         | U+2568          | BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE       |
| =╪=         | U+256A          | BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE |
| =╫=         | U+256B          | BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE |

Finally, there are special characters used in Paths that have a
specific meaning:

| Characters | UTF-8 Codepoints | Meaning                                 |
|------------+------------------+-----------------------------------------|
| =╼=, =╽=, =╾=, =╿= | U+257C to U+257F | Start the Path with a function argument |
| =╳=          | U+2573           | End the program with an error           |
| =→=, =←=, =↑=, =↓= | U+2190 to U+2193 | Returns with the content of the path    |

Let's put this in action. Here is an example of Bauge Paths, using
both single and double Paths, as well as an error termination, an
argument start and a return (the semantic of the branching out and ins
are discussed later in the documentation).

#+Begin_src bauge
╾──────────┐
┌──────────┘       ╔══╗
│              ┌───╢  ╟───┐
└──────────────┤   ╚══╝   │
               └───┬──────┴────→
╳──────────────────┘
#+End_src

* Semantics of the Path
A Path is essentially an *ordered list of values*. Each path can contain
one or more value of any type; value types can be heterogeneous. Paths
can either start with an argument of the current function, or with an
initial, arbitrary value.

** Start of a Path
*** Initial value
Paths can start with an initial value. For example, this path starts
with the value =20=. To be more accurate, the Path holds a list of
values containing a single one, with the value of =20=.

#+Begin_src bauge
20 ───────────────
#+End_src

When starting the Path in this manner in an /horizontal orientation/,
the value must be written on the *same line* as the starting point of
the Path. In a /vertical orientation/, the value must have at least one
character (whitespace or not) *above or below the starting point*. For
example, the following paths are valid:

#+Begin_src bauge
20 ──────────

         "hello world"
               │
               └────
#+End_src

But the following paths are not:

#+Begin_src bauge

42
────────
                   ┌─
                   │
           "foobar"
#+End_src

*** Function argument
Paths can also start with the value of an argument of a function,
using the special characters mentioned above. If we position ourselves
in the context of the function =fibonacci(Int) -> Int=, then the path
below holds the value of the first (and only) argument of the
function.

#+Begin_src bauge
╾─────────────────
#+End_src

When a function has multiple arguments, we consider the arguments
starting from the leftmost one to the rightmost one; and we attribute
them to starting paths in the following order:
- Left to right
- Top to bottom
- Right to left
- Bottom to top

If there are multiple starting points with the same orientation, we
order them in the following fashion:
- Left to right: *top to bottom*, then if there are still multiple on
  the same line, *left to right*.
- Top to bottom: *left to right*, then if there are still multiple on
  the same row, *top to bottom*.
- Right to left: *top to bottom*, then if there are still multiple on
  the same line, *right to left*.
- Bottom to top: *left to right*, then if there are still multiple on
  the same line, *bottom to top*.

In order to illustrate, here are all the possible cases for the
ordering of the arguments. The number next to the start of a Path
indicates which argument it will hold: 1 means the first argument from
the left, 2 the second, ...

#+Begin_src bauge
1 ╾     2 ╾   4 ╿   5 ╿
                   ╼ 7  
3 ╾       ╽ 12      6 ╿

              ╼ 9  ╼ 8
╽ 10      ╽ 11
#+End_src

Let's take a more concrete case: we consider the function =square(Int,
Int, Int, Int) -> Square=, which takes the X and Y coordinate of a
square, and its Width and Height, and returns a Square structure. We
can then order our arguments in this way (the text here is indicative
and is not tied to any correct syntax; it only illustrates which
argument is on which path).

#+Begin_src bauge
         ╿       ╿
       Width   Height

╾── X

╾── Y
#+End_src

**** Multiple arguments on a single path
If there is less Path argument starts than there are arguments to the
function, then all the remaining arguments are stored on the last
Path. For example, we can rewrite the start of the previous =square=
function in this manner:

#+Begin_src bauge
╾── X, Y, Width, Height
#+End_src

The Path contains a list of 4 values, being the arguments of the
function in order.

** Conditionality of paths
Paths can either be *conditional* or *unconditional*, depending on how
they are generated.

*Unconditional* Paths are the default Paths in Bauge. Each unconditional
Path is executed at some point, unless the program exits in the
meantime.

*Conditional* Paths stem from keywords such as =if=, =match=, and so on. The
program can potentially take all of the Paths, but only one will be
chosen in a single iteration.

In the following example, unconditional Paths are marked with a =U=, and
conditional Paths are marked with a =C=. This syntax is purely for
demonstrative purposes and does not reflect any meaningful keyword or
syntax of Bauge.

#+Begin_src bauge
20 ─────U──────
                     ┌───C───
40 ─────U────── if ──┤
                     └───C───
#+End_src

In this example, both of the unconditional Paths will be executed
sequentially; but on the second Path, only one of the two conditional
Paths will be taken.

If an unconditional Path joins another unconditional Path, then the
Paths are merged, and the new Path is considered having two starts
(more on that later).

** Path execution
We only consider here single Paths; that is, Paths using the "single"
version of the characters, and not the "double" characters. "Double"
characters denote parallel Paths, which are covered in their own
section.

*** Returns
In any case, a Bauge code block can have *one and only one
unconditional return*. Unconditional returns are ends of unconditional
Paths. A block can have as many *conditional returns* (returns on
conditional Paths), as long as they *come from the same unconditional
Path*. If there is already an unconditional return, there cannot be any
other return, even conditional.

For example, the following block is valid: there is only one
unconditional Path, with two starts and a junction. There are two
returns, but they are conditional, and are generated from the same
unconditional Path.

#+Begin_src bauge
╾──────────┐         ┌────→
           │         │
╾──────────┴──── if ─┴────→
#+End_src

While the following is not: there is an unconditional return at the
top, and two conditional returns underneath. While having two
conditional returns is OK, the unconditional return makes the block
invalid.

#+Begin_src bauge
╾─────────────────────────→
            ┌─────────────→
╾────── if ─┴─────────────→
#+End_src

*** Branching out
A Path can branch out unconditionally (without any =if=, =match=,
... keywords). This creates a *copy* of the Path, and all of its
values. For example, we duplicate here a Path, and both the new and
old path have the same values (the =#(...)#= notation is a comment,
which are covered in their own section).

#+Begin_src bauge
"foo" ────────┬─────── #(contains "foo")#
              │
              └─────── #(also contains "foo")#
#+End_src

The two Paths are *bound unconditionally*. This means that they are, in
context, unconditional, even if the starting Path is conditional. This
enables use to avoid this kind of problem:

#+Begin_src bauge
╾──────── if ───┬───────────→
                │
                └──────┬────→ 
                       └────→
#+End_src

If the program end up taking the top conditional Path, there is only
one return, so everything is fine. But the bottom conditional Path
branches out unconditionally, creating two copies of the same
conditional Path. Since both of them, in this context, will be
executed, there is a conflict for the return. This is why they are
bound unconditionally and considered as such. Let's illustrate with
labels to understand better:

#+Begin_src bauge
╾───U0─── if ───┬──────────C0────────────→ C0
                │
                └─────C0──────┬───C0U1───→ C0U1
                              └───C0U2───→ C0U2
#+End_src

The first returns comes from the path C0, which is conditional. The
other two also come from C0, but are first and foremost unconditional
themselves, making the block invalid.

*** Branching in
Paths can join another by /branching in/. The semantics of branching in
have different meanings depending on the type of the Path.

**** Unconditional branching in
*Unconditional* branching in, that is, when an unconditional Path merges
into another unconditional Path, *appends or pre-pends the values in the
incoming Path into the receiving Path*, depending on where the incoming
Path comes from.

Values are added to the start of the list of values of the receiving
Path if the incoming Path joins in from the left (if the receiving
Path is /vertical/) or from the top (if it is /horizontal/).

#+Begin_src bauge
20 ─────────┐
            │
"foo" ──────┴─────── #(contains 20, "foo")#
#+End_src

Values are added to the end of the list if the incoming Path comes
from the right for /vertical/ Paths or the bottom for /horizontal/ Paths.

#+Begin_src bauge
"foo" ───────┬────── #(contains "foo", 20)#
             │
20 ──────────┘
#+End_src

Branching in can be combined with branching out to emulate the
creation of variables in languages such as Python (more on the
application of functions later)

#+Begin_src bauge
42 ──────┬─────────────┬────── #(contains 42, 45)#
         └──── + 3 ────┘
#+End_src

**** Conditional branching in
Two conditional Paths can join, merging together. If the two
conditional Path "end" the current conditionality scope, that is, if
they are the last of their scope, then the scope is closed and the
Path assumes the conditionality of the scope before it. Let's take an
example to understand:

#+Begin_src bauge
╾───U0─── if ───┬───U0C0────┬─────U0─────
                │           │
                └───U0C0────┘
#+End_src

When we conditionally branch out due to the =if=, the scope is =U0 C0=:
the conditional Path group =C0= that was generated from the
unconditional Path =U0=. But then, we join the last two Path belonging
to that scope: since having a single Path belonging to a conditional
group is useless, the scope is ended, and the Path continues as an
unconditional one.

This is similar to how an =if...else= scope is ended in Rust:

#+Begin_src rust
// Here, we are at U0
if condition {
    // Top branch, scope is U0 C0
} else {
    // Bottom branch, scope is U0 C0
}
// Conditional scope ended, scope is the same as before: U0
#+End_src
