#+Title: Paths

The *Path* is the fundamental concept of Bauge. A Bauge program follows
one or more path, sequentially or in parallel, and executes the
instructions that are on the path.

* How Paths are written
Paths use a wide range of characters to form different directions,
branchings, starts and ends. Here are the possible characters used for
paths:

| Character | UTF-8 Codepoint | Unicode name                               |
|-----------+-----------------+--------------------------------------------|
| =┌=         | U+250C          | BOX DRAWINGS LIGHT DOWN AND RIGHT          |
| =┐=         | U+2510          | BOX DRAWINGS LIGHT DOWN AND LEFT           |
| =└=         | U+2514          | BOX DRAWINGS LIGHT UP AND RIGHT            |
| =┘=         | U+2518          | BOX DRAWINGS LIGHT UP AND LEFT             |
| =│=         | U+2502          | BOX DRAWINGS LIGHT VERTICAL                |
| =─=         | U+2500          | BOX DRAWINGS LIGHT HORIZONTAL              |
| =┼=         | U+253C          | BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL |
| =├=         | U+251C          | BOX DRAWINGS LIGHT VERTICAL AND RIGHT      |
| =┤=         | U+2524          | BOX DRAWINGS LIGHT VERTICAL AND LEFT       |
| =┬=         | U+252C          | BOX DRAWINGS LIGHT DOWN AND HORIZONTAL     |
| =┴=         | U+2534          | BOX DRAWINGS LIGHT UP AND HORIZONTAL       |

Paths can also take the form of /doubly-lined Paths/, which mean they
are executed in parallel (more on that later). The characters used are:

| Character | UTF-8 Codepoint | Unicode name                                |
|-----------+-----------------+---------------------------------------------|
| =╔=         | U+2554          | BOX DRAWINGS DOUBLE DOWN AND RIGHT          |
| =╗=         | U+2557          | BOX DRAWINGS DOUBLE DOWN AND LEFT           |
| =╚=         | U+255A          | BOX DRAWINGS DOUBLE UP AND RIGHT            |
| =╝=         | U+255D          | BOX DRAWINGS DOUBLE UP AND LEFT             |
| =║=         | U+2551          | BOX DRAWINGS DOUBLE VERTICAL                |
| =═=         | U+2550          | BOX DRAWINGS DOUBLE HORIZONTAL              |
| =╬=         | U+256C          | BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL |
| =╠=         | U+2560          | BOX DRAWINGS DOUBLE VERTICAL AND RIGHT      |
| =╣=         | U+2563          | BOX DRAWINGS DOUBLE VERTICAL AND LEFT       |
| =╦=         | U+2566          | BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL     |
| =╩=         | U+2569          | BOX DRAWINGS DOUBLE UP AND HORIZONTAL       |

Additionally, there are characters that are used to join double Paths
and single Paths:

| Character | UTF-8 Codepoint | Unicode name                                       |
|-----------+-----------------+----------------------------------------------------|
| =╒=         | U+2552          | BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE          |
| =╓=         | U+2553          | BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE          |
| =╕=         | U+2555          | BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE           |
| =╖=         | U+2556          | BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE           |
| =╘=         | U+2558          | BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE            |
| =╙=         | U+2559          | BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE            |
| =╛=         | U+255B          | BOX DRAWINGS UP SINGLE AND LEFT DOUBLE             |
| =╜=         | U+255C          | BOX DRAWINGS UP DOUBLE AND LEFT SINGLE             |
| =╞=         | U+255E          | BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE      |
| =╟=         | U+255F          | BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE      |
| =╡=         | U+2561          | BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE       |
| =╢=         | U+2562          | BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE       |
| =╤=         | U+2564          | BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE     |
| =╥=         | U+2565          | BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE     |
| =╧=         | U+2567          | BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE       |
| =╨=         | U+2568          | BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE       |
| =╪=         | U+256A          | BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE |
| =╫=         | U+256B          | BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE |

Finally, there are special characters used in Paths that have a
specific meaning:

| Characters | UTF-8 Codepoints | Meaning                                 |
|------------+------------------+-----------------------------------------|
| =╼=, =╽=, =╾=, =╿= | U+257C to U+257F | Start the Path with a function argument |
| =╳=          | U+2573           | End the program with an error           |
| =→=, =←=, =↑=, =↓= | U+2190 to U+2193 | Returns with the content of the path    |

Let's put this in action. Here is an example of Bauge Paths, using
both single and double Paths, as well as an error termination, an
argument start and a return (the semantic of the branching out and ins
are discussed later in the documentation).

#+Begin_src bauge
╾──────────┐
┌──────────┘       ╔══╗
│              ┌───╢  ╟───┐
└──────────────┤   ╚══╝   │
               └───┬──────┴────→
╳──────────────────┘
#+End_src

* Semantics of the Path
A Path is essentially an *ordered list of values*. Each path can contain
one or more value of any type; value types can be heterogeneous. Paths
can either start with an argument of the current function, or with an
initial, arbitrary value.

** Start of a Path

*** Initial value
Paths can start with an initial value. For example, this path starts
with the value =20=. To be more accurate, the Path holds a list of
values containing a single one, with the value of =20=.

#+Begin_src bauge
20 ───────────────
#+End_src

When starting the Path in this manner in an /horizontal orientation/,
the value must be written on the *same line* as the starting point of
the Path. In a /vertical orientation/, the value must have at least one
character (whitespace or not) above or below the starting point. For
example, the following paths are valid:

#+Begin_src bauge
20 ──────────

         "hello world"
               │
               └────
#+End_src

But the following paths are not:

#+Begin_src bauge

42
────────
                   ┌─
                   │
           "foobar"
#+End_src

*** Function argument
Paths can also start with the value of an argument of a function,
using the special characters mentioned above. If we position ourselves
in the context of the function =fibonacci(Int) -> Int=, then the path
below holds the value of the first (and only) argument of the
function.

#+Begin_src bauge
╾─────────────────
#+End_src

When a function has multiple arguments, we consider the arguments
starting from the leftmost one to the rightmost one; and we attribute
them to starting paths in the following order:
- Left to right
- Top to bottom
- Right to left
- Bottom to top

If there are multiple starting points with the same orientation, we
order them in the following fashion:
- Left to right: *top to bottom*, then if there are still multiple on
  the same line, *left to right*.
- Top to bottom: *left to right*, then if there are still multiple on
  the same row, *top to bottom*.
- Right to left: *top to bottom*, then if there are still multiple on
  the same line, *right to left*.
- Bottom to top: *left to right*, then if there are still multiple on
  the same line, *bottom to top*.

In order to illustrate, here are all the possible cases for the
ordering of the arguments. The number next to the start of a Path
indicates which argument it will hold: 1 means the first argument from
the left, 2 the second, ...

#+Begin_src bauge
1 ╾     2 ╾   4 ╿   5 ╿
                   ╼ 7  
3 ╾       ╽ 12      6 ╿

              ╼ 9  ╼ 8
╽ 10      ╽ 11
#+End_src

Let's take a more concrete case: we consider the function =square(Int,
Int, Int, Int) -> Square=, which takes the X and Y coordinate of a
square, and its Width and Height, and returns a Square structure. We
can then order our arguments in this way (the text here is indicative
and is not tied to any correct syntax; it only illustrates which
argument is on which path).

#+Begin_src bauge
         ╿       ╿
       Width   Height

╾── X

╾── Y
#+End_src

